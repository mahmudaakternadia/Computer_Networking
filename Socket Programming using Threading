import java.io.*; 
import java.net.*;
import java.util.*;


public class Client {
    public static void main(String[] args) {
        try {
            Socket socket = new Socket("localhost", 5000);
            System.out.println("Connected to server.");

            DataInputStream dis = new DataInputStream(socket.getInputStream());
            DataOutputStream dos = new DataOutputStream(socket.getOutputStream());
            Scanner sc = new Scanner(System.in);

            while (true) {
                String prompt = dis.readUTF();
                System.out.println(prompt);
                String input = sc.nextLine();
                dos.writeUTF(input);

                if (input.equalsIgnoreCase("ENDS")) {
                    System.out.println("Disconnected from server.");
                    break;
                }

                prompt = dis.readUTF();
                System.out.println(prompt);
                input = sc.nextLine();
                dos.writeUTF(input);

                prompt = dis.readUTF();
                System.out.println(prompt);
                input = sc.nextLine();
                dos.writeUTF(input);

                String result = dis.readUTF();
                System.out.println(result);
            }

            dis.close();
            dos.close();
            socket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}



public class Server {
    private static int clientCount = 0;
    private static final int MAX_CLIENTS = 5;
    public static void main(String[] args) throws IOException {
        ServerSocket serverSocket = new ServerSocket(5000);
        System.out.println("Server started at port 5000");

        while (clientCount < MAX_CLIENTS) {
            Socket clientSocket = serverSocket.accept();
            clientCount++;
            System.out.println("Client " + clientCount + " connected: " + clientSocket);

            DataInputStream dis = new DataInputStream(clientSocket.getInputStream());
            DataOutputStream dos = new DataOutputStream(clientSocket.getOutputStream());

            Thread t = new ClientHandler(clientSocket, dis, dos);
            t.start();
        }
        System.out.println("Maximum client (5) limit reached. Server is shutting down.");
        serverSocket.close();
    }
}


class ClientHandler extends Thread {
    private final Socket socket;
    private final DataInputStream dis;
    private final DataOutputStream dos;

    public ClientHandler(Socket socket, DataInputStream dis, DataOutputStream dos) {
        this.socket = socket;
        this.dis = dis;
        this.dos = dos;
    }

    public void run() {
        String inputLine;

        try {
            while (true) {
                dos.writeUTF("Enter first number or 'ENDS' to quit:");
                inputLine = dis.readUTF();

                if (inputLine.equalsIgnoreCase("ENDS")) {
                    System.out.println("Client " + socket + " disconnected.");
                    break;
                }

                int num1 = Integer.parseInt(inputLine);

                dos.writeUTF("Enter second number:");
                int num2 = Integer.parseInt(dis.readUTF());

                dos.writeUTF("Enter operation:\n1. Sum\n2. Subtract\n3. Multiplication\n4. Division\n5. Modules");
                String operationInput = dis.readUTF();

                int operation;
                try {
                    operation = Integer.parseInt(operationInput);
                } catch (NumberFormatException e) {
                    dos.writeUTF("Invalid operation input. Please enter a number from 1 to 5.");
                    continue;
                }

                int result = 0;
                boolean valid = true;

                switch (operation) {
                    case 1:
                        result = num1 + num2;
                        break;
                    case 2:
                        result = num1 - num2;
                        break;
                    case 3:
                        result = num1 * num2;
                        break;
                    case 4:
                        if (num2 != 0) {
                            result = num1 / num2;
                        } else {
                            dos.writeUTF("Division by zero is not allowed.");
                            valid = false;
                        }
                        break;
                    case 5:
                        result = num1 % num2;
                        break;
                    default:
                        dos.writeUTF("Invalid operation number.");
                        valid = false;
                }

                if (valid) {
                    dos.writeUTF("Result: " + result);
                }
            }

            dis.close();
            dos.close();
            socket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
